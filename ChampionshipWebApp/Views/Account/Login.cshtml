@using Championship;
@using ChampionshipWebApp.Resources
@model LoginViewModel
@{
    var currentCulture = ViewData["Culture"]?.ToString() ?? "en";
    var languages = ViewData["Languages"] as List<Language>;
}

<!DOCTYPE html>
<html lang="@currentCulture">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <title>@Resources.LoginTitle</title>
    <style>
        body {
            background-color: #f0f2f5;
        }

        .dropdown-menu {
            display: none;
        }

            .dropdown-menu.show {
                display: block;
            }

        .login-container {
            max-width: 400px;
            margin: auto;
            padding: 30px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        h2 {
            margin-bottom: 20px;
            text-align: center;
            color: #343a40;
        }

        .text-danger, .text-success {
            text-align: center;
            margin-top: 10px;
        }

        .btn-space {
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm fixed-top">
            <div class="container-fluid">
                <h2 style="color:white">ChampionshipWebApp</h2>
                <div class="ml-auto">
                    <div class="dropdown">
                        <button id="SelectLanguage" class=" btn btn-secondary dropdown-toggle" type="button" id="languageDropdown" data-toggle="dropdown">
                            @Resources.SelectLanguage
                        </button>
                        <div class="dropdown-menu" aria-labelledby="languageDropdown">
                            @foreach (var language in languages)
                            {
                                <button type="button" class="dropdown-item change-language" data-language="@language.Code">
                                    @language.Name
                                </button>
                            }
                        </div>

                    </div>
                </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="navbar-toggler-icon"></span>
                </button>
            </div>
        </nav>
    </header>

    <div class="login-container">
        <h2 id="LoginTitle">@Resources.LoginTitle</h2>
        @if (TempData["RegistrationSuccessMessage"] != null)
        {
            <div id="success-message" class="alert alert-success" role="alert">
                @TempData["RegistrationSuccessMessage"]
            </div>
        }

        <form asp-action="Login" method="post">
            <input type="hidden" name="culture" value="@currentCulture" />
            <div class="form-group">
                <label id="UsernameLabel" asp-for="Username" class="form-label">@Resources.UsernameLabel</label>
                <input id="InsertUsername" asp-for="Username" maxlength="30" class="form-control" value="@ViewData["Username"]" placeholder="@Resources.InsertUsername" />
            </div>
            <div class="form-group">
                <label id="PasswordLabel" asp-for="Password" class="form-label">@Resources.PasswordLabel</label>
                <input asp-for="Password" maxlength="30" type="password" class="form-control" placeholder="@Resources.InsertPassword" />
            </div>

            <div class="d-flex justify-content-between">
                <button id="LoginButton" type="submit" class="btn btn-primary btn-block btn-space">@Resources.LoginButton</button>
                <button id="RegisterButton" type="button" class="btn btn-secondary btn-space" data-toggle="modal" data-target="#registerModal">
                    @Resources.RegisterButton
                </button>
            </div>
        </form>

        @if (!ViewData.ModelState.IsValid)
        {
            <div class="text-danger">@Resources.InvalidCredentialsMessage</div>
        }
    </div>

    <div class="modal fade" id="registerModal" tabindex="-1" role="dialog" aria-labelledby="registerModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="registerModalLabel">@Resources.RegisterButton</h5>
                    <button type="button" class="close" data-dismiss="modal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="registrationForm" method="post" asp-action="Register">
                        <div class="form-group">
                            <label id="UsernameLabel" for="newUsername">@Resources.UsernameLabel</label>
                            <input type="text" id="newUsername" maxlength="30" name="Username" class="form-control" required placeholder="@Resources.InsertUsername">
                        </div>
                        <div class="form-group">
                            <label for="newPassword">@Resources.PasswordLabel</label>
                            <input type="password" id="newPassword" maxlength="30" name="Password" class="form-control" required placeholder="@Resources.InsertPassword">
                            <div class="invalid-feedback">@Resources.NoSpace</div>
                        </div>

                        <div class="form-group">
                            <label for="newLanguage">@Resources.SelectLanguage</label>
                            <select id="newLanguage" name="Language" class="form-control">
                                @foreach (var language in languages)
                                {
                                    <option value="@language.Code">@language.Name</option>
                                }
                            </select>
                        </div>

                        <button type="submit" class="btn btn-primary" id="registerButton">@Resources.RegisterButton</button>
                    </form>

                    @if (!string.IsNullOrEmpty(ViewBag.RegistrationError))
                    {
                        <div class="text-danger mt-2" id="registrationMessage">@ViewBag.RegistrationError</div>
                    }

                    @if (!string.IsNullOrEmpty(ViewBag.UsernameInUseMessage))
                    {
                        <div class="text-danger mt-2" id="usernameInUseMessage">@Resources.UsernameInUse</div>
                    }
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>

        document.addEventListener("DOMContentLoaded", function () 
        {
            var resxLanguages = JSON.parse('@Html.Raw(ViewBag.ResxLanguages)');
            var userLanguage = '@ViewData["Culture"]'; 

            // Funzione per aggiornare i testi in base alla lingua selezionata
            function updateLanguage(language) {
                if (resxLanguages[language]) {
                    var localizedResources = resxLanguages[language];

                    localizedResources.forEach(function (resource) {
                        var element = document.getElementById(resource.ElementName);
                        if (element) {
                            element.innerText = resource.ElementValue;
                        }
                    });

                    // Aggiorna il cookie 'Culture' per mantenere la lingua scelta anche nei prossimi refresh della pagina
                    document.cookie = `Culture=${language};`;
                }
            }

            // Inizializza la lingua corrente
            updateLanguage(userLanguage);

            // Cambia la lingua al click del bottone
            document.querySelectorAll('.change-language').forEach(function (button) {
                button.addEventListener('click', function () {
                    var selectedLanguage = this.getAttribute('data-language');
                    updateLanguage(selectedLanguage);

                    location.reload(); 
                });
            });
        });


        $(document).ready(function () {
            var showRegisterModal = '@(ViewBag.ShowRegisterModal != null && (bool)ViewBag.ShowRegisterModal)';
            if (showRegisterModal === 'True') {
                $('#registerModal').modal('show');
            }

            // Reset dei messaggi nel modale di registrazione
            $('#registerModal').on('hidden.bs.modal', function () {
                $('#registrationMessage').text('');
                $('#usernameInUseMessage').text('');
                $('#newPassword').removeClass('is-invalid');
                $('#registerButton').prop('disabled', false);
            });

            // Controllo della validità della password durante l'inserimento
            $('#newPassword').on('input', function () {
                var password = $(this).val();
                if (/\s/.test(password)) {
                    $(this).addClass('is-invalid');
                    $('#registerButton').prop('disabled', true);
                } else {
                    $(this).removeClass('is-invalid');
                    $('#registerButton').prop('disabled', false);
                }
            });
        });
    </script>
</body>
</html>